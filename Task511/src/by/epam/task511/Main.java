package by.epam.task511;

/*
 *
 * Задача 1.
 * Создать объект класса Текстовый файл, используя классы Файл, Директория.
 * Методы: создать, переименовать, вывести на консоль содержимое, дополнить, удалить.
 */

public class Main {

  public static void main(String[] args) {

    // создаем директорию
    Directory myDocuments = new Directory("My_Documents");
    // создаем файлы и сохраняем туда текст
    myDocuments.createTextFile("The comma operator", "txt");
    String text = "Earlier in this chapter I stated that the comma operator (not the comma separator, which is " +
            "used to separate definitions and method arguments) has only one use in Java: in the control " +
            "expression of a for loop. In both the initialization and step portions of the control " +
            "expression, you can have a number of statements separated by commas, and those " +
            "statements will be evaluated sequentially.\n";
    myDocuments.getTextFiles("The comma operator").addText(text);

    myDocuments.createTextFile("Foreach syntax", "txt");
    text = "Java SE5 introduces a new and more succinct for syntax, for use with arrays and containers " +
            "(you’ll learn more about these in the Arrays and Containers in Depth chapter). This is often " +
            "called the foreach syntax, and it means that you don’t have to create an int to count through " +
            "a sequence of items—the foreach produces each item for you, automatically.\n";
    myDocuments.getTextFiles("Foreach syntax").addText(text);

    myDocuments.createTextFile("The infamous “goto”", "txt");
    text = "The goto keyword has been present in programming languages from the beginning. Indeed, " +
            "goto was the genesis of program control in assembly language: “If condition A, then jump " +
            "here; otherwise, jump there.” If you read the assembly code that is ultimately generated by " +
            "virtually any compiler, you’ll see that program control contains many jumps (the Java " +
            "compiler produces its own “assembly code,” but this code is run by the Java Virtual Machine " +
            "rather than directly on a hardware CPU).\n";
    myDocuments.getTextFiles("The infamous “goto”").addText(text);

    myDocuments.createTextFile("Summary", "txt");
    text = "In any relationship it’s important to have boundaries that are respected by all parties " +
            "involved. When you create a library, you establish a relationship with the user of that " +
            "library—the client programmer—who is another programmer, but one using your library to " +
            "build an application or a bigger library.\n" +
            "Without rules, client programmers can do anything they want with all the members of a " +
            "class, even if you might prefer they don’t directly manipulate some of the members. " +
            "Everything’s naked to the world.\n";
    myDocuments.getTextFiles("Summary").addText(text);

    DirectoryView directoryView = new DirectoryView(myDocuments);
    // вывод на консоль содержимого директории
    directoryView.showDirectory();

    // удаление файла
    myDocuments.deleteTextFile("Foreach syntax");
    directoryView.setDirectory(myDocuments);
    directoryView.showDirectory();
    System.out.println();

    // вывод содержимого фаилов
    System.out.println(myDocuments.getTextFiles("Summary").getText());
    // добавляем текст в файл Summary.txt
    text = "This chapter looked at how classes are built to form libraries: first, the way a group of classes " +
            "is packaged within a library, and second, the way the class controls access to its members.\n";
    myDocuments.getTextFiles("Summary").addText(text);
    System.out.println(myDocuments.getTextFiles("Summary").getText());
  }
}
